---
name: CICD
on:
  push:
    branches:
      - main
      - docs-publish
    tags:
      - "v*"
  pull_request:

env:
  GOVER: 1.17.2
  CGO_ENABLED: 0
  MKDOCS_MATERIAL_VER: 7.3.6
  GORELEASER_VER: v0.180.3

jobs:
  file-changes:
    runs-on: ubuntu-20.04
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            code:
              - 'clab/**'
              - 'runtime/**'
              - 'cmd/**'
              - 'tests/**'
              - 'nodes/**'
              - 'types/**'
              - 'utils/**'
              - '.github/workflows/cicd.yml'
            docs:
              - "docs/**"
              - "lab-examples/**"
              - "mkdocs.yml"
              - "README.md"
              - '.github/workflows/cicd.yml'

  build-containerlab:
    runs-on: ubuntu-20.04
    needs: file-changes
    if: needs.file-changes.outputs.code == 'true' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build containerlab
        run: CGO_ENABLED=0 go build -o containerlab -ldflags="-s -w -X 'github.com/srl-labs/containerlab/cmd.version=0.0.0' -X 'github.com/srl-labs/containerlab/cmd.commit=$(git rev-parse --short HEAD)' -X 'github.com/srl-labs/containerlab/cmd.date=$(date)'" -trimpath -tags "podman exclude_graphdriver_btrfs btrfs_noversion exclude_graphdriver_devicemapper exclude_graphdriver_overlay containers_image_openpgp" main.go
      # store clab binary as artifact
      - uses: actions/upload-artifact@v2
        with:
          name: containerlab
          path: containerlab

  unit-test:
    runs-on: ubuntu-20.04
    needs: file-changes
    if: needs.file-changes.outputs.code == 'true' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go test -cover ./...
      - name: Staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

  smoke-tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        runtime: ["docker", "containerd", "podman"]
    needs:
      - unit-test
      - build-containerlab
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: containerlab
      - name: Move containerlab to usr/bin
        run: sudo mv ./containerlab /usr/bin/containerlab && sudo chmod a+x /usr/bin/containerlab

      - name: Enable Podman API service
        run: sudo systemctl start podman

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          cache: pip
          cache-dependency-path: "tests/requirements.txt"
      - name: Install robotframework
        run: |
          pip install -r tests/requirements.txt
      - name: Run smoke tests
        run: |
          bash ./tests/rf-run.sh ${{ matrix.runtime }} ./tests/01-smoke
      # upload test reports as a zip file
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 01-smoke-log
          path: ./tests/out/*.html

  ceos-basic-tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        runtime:
          - "docker"
          # - "containerd"
    needs:
      - unit-test
      - build-containerlab
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: containerlab
      - name: Move containerlab to usr/bin
        run: sudo mv ./containerlab /usr/bin/containerlab && sudo chmod a+x /usr/bin/containerlab
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          cache: pip
          cache-dependency-path: "tests/requirements.txt"
      - name: Install robotframework
        run: |
          pip install -r tests/requirements.txt
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull ceos image
        run: docker pull ghcr.io/srl-labs/ceos:4.25.0F && docker tag ghcr.io/srl-labs/ceos:4.25.0F ceos:4.25.0F
      - name: Run ceos tests
        run: |
          bash ./tests/rf-run.sh ${{ matrix.runtime }} ./tests/03-basic-ceos
      # upload test reports as a zip file
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 03-basic-ceos-log
          path: ./tests/out/*.html

  srlinux-basic-tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        runtime:
          - "docker"
          # - "containerd"
    needs:
      - unit-test
      - build-containerlab
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: containerlab
      - name: Move containerlab to usr/bin
        run: sudo mv ./containerlab /usr/bin/containerlab && sudo chmod a+x /usr/bin/containerlab
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          cache: pip
          cache-dependency-path: "tests/requirements.txt"
      - name: Install robotframework
        run: |
          pip install -r tests/requirements.txt
      - name: Run srlinux tests
        run: |
          bash ./tests/rf-run.sh ${{ matrix.runtime }} ./tests/02-basic-srl
      # upload test reports as a zip file
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: 02-basic-srl-log
          path: ./tests/out/*.html

  docs-test:
    runs-on: ubuntu-20.04
    needs: file-changes
    if: needs.file-changes.outputs.docs == 'true' || startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/docs-publish'
    steps:
      - uses: actions/checkout@v2
      - run: docker run -v $(pwd):/docs --entrypoint mkdocs squidfunk/mkdocs-material:$MKDOCS_MATERIAL_VER build --clean --strict

      - name: Cache htmltest external links
        uses: actions/cache@v2
        with:
          path: tmp/.htmltest
          # key will contain hash of all md files to check if files have changed
          # when files are changed, a new key name is formed, and thus a new cache will be saved
          key: htmltest-${{ hashFiles('docs/**/*.md') }}
          # the restore key will fetch any previously saved cache even if there is no match on key
          # this allows to use cache from prev runs and update it
          restore-keys: |
            htmltest-

      - name: htmltest
        uses: wjdp/htmltest-action@master
        with:
          config: docs/htmltest.yml

  build-and-release:
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - docs-test
      - smoke-tests
      - ceos-basic-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install upx
        run: |
          sudo apt update && sudo apt install -y libucl1
          curl -L http://archive.ubuntu.com/ubuntu/pool/universe/u/upx-ucl/upx-ucl_3.96-2_amd64.deb -o /tmp/upx.deb
          sudo dpkg -i /tmp/upx.deb

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: ${{ env.GORELEASER_VER }}
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FURY_TOKEN: ${{ secrets.FURYPUSHTOKEN }}

  publish-docs:
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-') != true
    needs: build-and-release
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: docker run -v $(pwd):/docs --entrypoint mkdocs squidfunk/mkdocs-material:$MKDOCS_MATERIAL_VER gh-deploy --force --strict

  # update docs allows to make the docs changes outside of the release cycle
  # it skips the code build/release and proceeds with docs publishing
  # the intended usage is to provide fixes/updates to docs, which do not require code changes
  update-docs:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/docs-publish'
    needs: docs-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: docker run -v $(pwd):/docs --entrypoint mkdocs squidfunk/mkdocs-material:$MKDOCS_MATERIAL_VER gh-deploy --force --strict
